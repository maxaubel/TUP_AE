# -*- coding: utf-8 -*-
"""IA_TUP_AE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uI4CKr-xLV9mTHd5hxNHOg3LG6uISPFT
"""

from os import listdir
from os.path import isfile, join
import csv
import pandas as pd
import matplotlib.pyplot as plt
import collections
from matplotlib import cm
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

'''
folder = 'output_new/n_Individuals_test_21-07-30_16-59-26/'
files = [f for f in listdir(folder) if isfile(join(folder, f))]

iterations = dict()

for current_file in files:
    population = current_file.split("_")[-1].split(".")[0]
    iterations[int(population)] = pd.read_csv(folder+current_file, sep=";")

plt.figure(figsize=(16, 10))
#plt.ylim([175000, 400000])

iterations_ordered = collections.OrderedDict(sorted(iterations.items()))
n = len(iterations_ordered)
i = 0

for population in iterations_ordered:
    max_generation = iterations[population][['generation']].max()
    xx = np.linspace(0, 720, max_generation[0])

    plt.plot(xx, iterations[population][['fitness']], 
             label=population, 
             c=cm.brg(1-i/n), 
             linewidth=1)#+3*i/n)
    i += 1

plt.suptitle('Fitness en funci贸n del tiempo para 16 equipos, q1=4 y q2=1', fontsize=20)
plt.xlabel('Tiempo [s]', fontsize=18)
plt.ylabel('Fitness', fontsize=16)

plt.axis()
plt.legend()
plt.show()

plt.figure(figsize=(16, 10))
plt.yscale('log')
iterations_ordered = collections.OrderedDict(sorted(iterations.items()))
n = len(iterations_ordered)
i = 0

for population in iterations_ordered:
    max_generation = iterations[population][['generation']].max()
    xx = np.linspace(0, 720, max_generation[0])

    plt.plot(xx, iterations[population][['fitness']], 
             label=population, 
             c=cm.brg(1-i/n), 
             linewidth=1)#+3*i/n)
    i += 1

plt.suptitle('Fitness en funci贸n del tiempo para 16 equipos, q1=4 y q2=1', fontsize=20)
plt.xlabel('Tiempo [s]', fontsize=18)
plt.ylabel('log(Fitness)', fontsize=16)

plt.ylim([175000, 235000])
plt.axis()
plt.legend()
plt.show()
'''
folder = 'output_new/n_Individuals_test_21-07-30_17-01-21/'
files = [f for f in listdir(folder) if isfile(join(folder, f))]

iterations = dict()

for current_file in files:
    nTeams = int(current_file.split("_")[0][4:])
    q1 = int(current_file.split("_")[1])
    q2 = int(current_file.split("_")[2])
    
    population = current_file.split("_")[-1].split(".")[0].split(" ")[0]
    iterations[int(population)] = pd.read_csv(folder+current_file, sep=";")

'''
plt.figure(figsize=(16, 10))
#plt.ylim([175000, 400000])

iterations_ordered = collections.OrderedDict(sorted(iterations.items()))
n = len(iterations_ordered)
i = 0

for population in iterations_ordered:
    max_generation = iterations[population][['generation']].max()
    xx = np.linspace(0, 720, max_generation[0])

    plt.plot(xx, iterations[population][['fitness']], 
             label=population, 
             c=cm.brg(1-i/n), 
             linewidth=1)#+3*i/n)
    i += 1

plt.suptitle(f'Fitness en funci贸n del tiempo para {nTeams} equipos, q1={q1+1} y q2={q2+1}', fontsize=20) 
plt.xlabel('Tiempo [s]', fontsize=18)
plt.ylabel('Fitness', fontsize=16)

plt.axis()
plt.legend()
plt.show()
'''

plt.figure(figsize=(16, 10))
#plt.ylim([175000, 400000])

iterations_ordered = collections.OrderedDict(sorted(iterations.items()))
n = len(iterations_ordered)
i = 0

fig = plt.figure()
#ax = fig.add_subplot(111, projection='3d')
ax = plt.axes(projection='3d')

for population in iterations_ordered:
    max_generation = iterations[population][['generation']].max()
    xx = np.linspace(0, 720, max_generation[0])
    # # 
    pnt3d = ax.scatter3D(
                        [i]*max_generation, 
                        xx, 
                        iterations[population][['fitness']]/100000, 
                        label=population, 
                        c=cm.brg(1-i/n), 
                        linewidth=1)#+3*i/n)
    i += 1

#plt.suptitle(f'Fitness en funci贸n del tiempo para {nTeams} equipos, q1={q1+1} y q2={q2+1}', fontsize=20) 
ax.set_xlabel('Tiempo [s]', fontsize=18)
ax.set_ylabel('Fitness', fontsize=16)
ax.set_zlabel('Population Size')
cbar=plt.colorbar(pnt3d)

'''
plt.axes(projection='3d')
plt.plot_surface(X, Y, Z, rstride=1, cstride=1,
                cmap='viridis', edgecolor='none')
'''
#plt.axis()
#plt.legend()
plt.show()